///
/// HybridImageSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridImageSpec.hpp"

// Forward declaration of `HybridImageSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageSpec_cxx; }

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `HybridImageSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpec; }
// Forward declaration of `ImageFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class ImageFormat; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include <NitroModules/Promise.hpp>
#include <memory>
#include "HybridImageSpec.hpp"
#include <string>
#include "ImageFormat.hpp"

#include "NitroImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::image {

  /**
   * The C++ part of HybridImageSpec_cxx.swift.
   *
   * HybridImageSpecSwift (C++) accesses HybridImageSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridImageSpec_cxx can directly inherit from the C++ class HybridImageSpec
   * to simplify the whole structure and memory management.
   */
  class HybridImageSpecSwift: public virtual HybridImageSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridImageSpecSwift(const NitroImage::HybridImageSpec_cxx& swiftPart):
      HybridObject(HybridImageSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridImageSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline double getWidth() noexcept override {
      return _swiftPart.getWidth();
    }
    inline double getHeight() noexcept override {
      return _swiftPart.getHeight();
    }

  public:
    // Methods
    inline std::shared_ptr<ArrayBuffer> toArrayBuffer() override {
      auto __result = _swiftPart.toArrayBuffer();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> toArrayBufferAsync() override {
      auto __result = _swiftPart.toArrayBufferAsync();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> resize(double width, double height) override {
      auto __result = _swiftPart.resize(std::forward<decltype(width)>(width), std::forward<decltype(height)>(height));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::shared_ptr<margelo::nitro::image::HybridImageSpec>>> resizeAsync(double width, double height) override {
      auto __result = _swiftPart.resizeAsync(std::forward<decltype(width)>(width), std::forward<decltype(height)>(height));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<margelo::nitro::image::HybridImageSpec> crop(double startX, double startY, double endX, double endY) override {
      auto __result = _swiftPart.crop(std::forward<decltype(startX)>(startX), std::forward<decltype(startY)>(startY), std::forward<decltype(endX)>(endX), std::forward<decltype(endY)>(endY));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::shared_ptr<margelo::nitro::image::HybridImageSpec>>> cropAsync(double startX, double startY, double endX, double endY) override {
      auto __result = _swiftPart.cropAsync(std::forward<decltype(startX)>(startX), std::forward<decltype(startY)>(startY), std::forward<decltype(endX)>(endX), std::forward<decltype(endY)>(endY));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> saveToFileAsync(const std::string& path, ImageFormat format, double quality) override {
      auto __result = _swiftPart.saveToFileAsync(path, static_cast<int>(format), std::forward<decltype(quality)>(quality));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> saveToTemporaryFileAsync(ImageFormat format, double quality) override {
      auto __result = _swiftPart.saveToTemporaryFileAsync(static_cast<int>(format), std::forward<decltype(quality)>(quality));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<ArrayBuffer> toThumbHash() override {
      auto __result = _swiftPart.toThumbHash();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> toThumbHashAsync() override {
      auto __result = _swiftPart.toThumbHashAsync();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroImage::HybridImageSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::image
