///
/// HybridImageFactorySpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridImageFactorySpec``
public protocol HybridImageFactorySpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func loadFromURLAsync(url: String, options: AsyncImageLoadOptions?) throws -> Promise<(any HybridImageSpec)>
  func loadFromFile(filePath: String) throws -> (any HybridImageSpec)
  func loadFromFileAsync(filePath: String) throws -> Promise<(any HybridImageSpec)>
  func loadFromResources(name: String) throws -> (any HybridImageSpec)
  func loadFromResourcesAsync(name: String) throws -> Promise<(any HybridImageSpec)>
  func loadFromSymbol(symbolName: String) throws -> (any HybridImageSpec)
  func loadFromArrayBuffer(buffer: ArrayBufferHolder) throws -> (any HybridImageSpec)
  func loadFromArrayBufferAsync(buffer: ArrayBufferHolder) throws -> Promise<(any HybridImageSpec)>
  func loadFromThumbHash(thumbhash: ArrayBufferHolder) throws -> (any HybridImageSpec)
  func loadFromThumbHashAsync(thumbhash: ArrayBufferHolder) throws -> Promise<(any HybridImageSpec)>
}

/// See ``HybridImageFactorySpec``
public class HybridImageFactorySpec_base {
  private weak var cxxWrapper: HybridImageFactorySpec_cxx? = nil
  public func getCxxWrapper() -> HybridImageFactorySpec_cxx {
  #if DEBUG
    guard self is HybridImageFactorySpec else {
      fatalError("`self` is not a `HybridImageFactorySpec`! Did you accidentally inherit from `HybridImageFactorySpec_base` instead of `HybridImageFactorySpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridImageFactorySpec_cxx(self as! HybridImageFactorySpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ImageFactory HybridObject.
 * Implement this protocol to create Swift-based instances of ImageFactory.
 * ```swift
 * class HybridImageFactory : HybridImageFactorySpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridImageFactorySpec = HybridImageFactorySpec_protocol & HybridImageFactorySpec_base
