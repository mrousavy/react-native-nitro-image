///
/// HybridImageSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridImageSpec``
public protocol HybridImageSpec_protocol: HybridObject {
  // Properties
  var width: Double { get }
  var height: Double { get }

  // Methods
  func toArrayBuffer() throws -> ArrayBufferHolder
  func toArrayBufferAsync() throws -> Promise<ArrayBufferHolder>
  func resize(width: Double, height: Double) throws -> (any HybridImageSpec)
  func resizeAsync(width: Double, height: Double) throws -> Promise<(any HybridImageSpec)>
  func saveToFileAsync(path: String, format: ImageFormat, quality: Double) throws -> Promise<Void>
  func saveToTemporaryFileAsync(format: ImageFormat, quality: Double) throws -> Promise<String>
  func toThumbHash() throws -> ArrayBufferHolder
  func toThumbHashAsync() throws -> Promise<ArrayBufferHolder>
}

/// See ``HybridImageSpec``
public class HybridImageSpec_base {
  private weak var cxxWrapper: HybridImageSpec_cxx? = nil
  public func getCxxWrapper() -> HybridImageSpec_cxx {
  #if DEBUG
    guard self is HybridImageSpec else {
      fatalError("`self` is not a `HybridImageSpec`! Did you accidentally inherit from `HybridImageSpec_base` instead of `HybridImageSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridImageSpec_cxx(self as! HybridImageSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Image HybridObject.
 * Implement this protocol to create Swift-based instances of Image.
 * ```swift
 * class HybridImage : HybridImageSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridImageSpec = HybridImageSpec_protocol & HybridImageSpec_base
