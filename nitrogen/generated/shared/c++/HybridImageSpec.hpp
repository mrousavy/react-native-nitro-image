///
/// HybridImageSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `HybridImageSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpec; }
// Forward declaration of `ImageFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class ImageFormat; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/Promise.hpp>
#include <memory>
#include "HybridImageSpec.hpp"
#include <string>
#include "ImageFormat.hpp"

namespace margelo::nitro::image {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Image`
   * Inherit this class to create instances of `HybridImageSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridImage: public HybridImageSpec {
   * public:
   *   HybridImage(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridImageSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridImageSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridImageSpec() override = default;

    public:
      // Properties
      virtual double getWidth() = 0;
      virtual double getHeight() = 0;

    public:
      // Methods
      virtual std::shared_ptr<ArrayBuffer> toArrayBuffer() = 0;
      virtual std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> toArrayBufferAsync() = 0;
      virtual std::shared_ptr<margelo::nitro::image::HybridImageSpec> resize(double width, double height) = 0;
      virtual std::shared_ptr<Promise<std::shared_ptr<margelo::nitro::image::HybridImageSpec>>> resizeAsync(double width, double height) = 0;
      virtual std::shared_ptr<Promise<void>> saveToFileAsync(const std::string& path, ImageFormat format, double quality) = 0;
      virtual std::shared_ptr<Promise<std::string>> saveToTemporaryFileAsync(ImageFormat format, double quality) = 0;
      virtual std::shared_ptr<ArrayBuffer> toThumbHash() = 0;
      virtual std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> toThumbHashAsync() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Image";
  };

} // namespace margelo::nitro::image
