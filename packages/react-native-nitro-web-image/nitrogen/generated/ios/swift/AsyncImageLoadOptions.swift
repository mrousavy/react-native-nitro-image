///
/// AsyncImageLoadOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `AsyncImageLoadOptions`, backed by a C++ struct.
 */
public typealias AsyncImageLoadOptions = margelo.nitro.web.image.AsyncImageLoadOptions

public extension AsyncImageLoadOptions {
  private typealias bridge = margelo.nitro.web.image.bridge.swift

  /**
   * Create a new instance of `AsyncImageLoadOptions`.
   */
  init(priority: AsyncImagePriority?, forceRefresh: Bool?, cacheKey: StringHolder?, continueInBackground: Bool?, allowInvalidSSLCertificates: Bool?, scaleDownLargeImages: Bool?, queryMemoryDataSync: Bool?, queryDiskDataSync: Bool?, decodeImage: Bool?) {
    self.init({ () -> bridge.std__optional_AsyncImagePriority_ in
      if let __unwrappedValue = priority {
        return bridge.create_std__optional_AsyncImagePriority_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = forceRefresh {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_StringHolder_ in
      if let __unwrappedValue = cacheKey {
        return bridge.create_std__optional_StringHolder_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = continueInBackground {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = allowInvalidSSLCertificates {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = scaleDownLargeImages {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = queryMemoryDataSync {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = queryDiskDataSync {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = decodeImage {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var priority: AsyncImagePriority? {
    @inline(__always)
    get {
      return self.__priority.value
    }
    @inline(__always)
    set {
      self.__priority = { () -> bridge.std__optional_AsyncImagePriority_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_AsyncImagePriority_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var forceRefresh: Bool? {
    @inline(__always)
    get {
      return self.__forceRefresh.value
    }
    @inline(__always)
    set {
      self.__forceRefresh = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var cacheKey: StringHolder? {
    @inline(__always)
    get {
      return { () -> StringHolder? in
        if let __unwrapped = self.__cacheKey.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__cacheKey = { () -> bridge.std__optional_StringHolder_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_StringHolder_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var continueInBackground: Bool? {
    @inline(__always)
    get {
      return self.__continueInBackground.value
    }
    @inline(__always)
    set {
      self.__continueInBackground = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var allowInvalidSSLCertificates: Bool? {
    @inline(__always)
    get {
      return self.__allowInvalidSSLCertificates.value
    }
    @inline(__always)
    set {
      self.__allowInvalidSSLCertificates = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var scaleDownLargeImages: Bool? {
    @inline(__always)
    get {
      return self.__scaleDownLargeImages.value
    }
    @inline(__always)
    set {
      self.__scaleDownLargeImages = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var queryMemoryDataSync: Bool? {
    @inline(__always)
    get {
      return self.__queryMemoryDataSync.value
    }
    @inline(__always)
    set {
      self.__queryMemoryDataSync = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var queryDiskDataSync: Bool? {
    @inline(__always)
    get {
      return self.__queryDiskDataSync.value
    }
    @inline(__always)
    set {
      self.__queryDiskDataSync = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var decodeImage: Bool? {
    @inline(__always)
    get {
      return self.__decodeImage.value
    }
    @inline(__always)
    set {
      self.__decodeImage = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
