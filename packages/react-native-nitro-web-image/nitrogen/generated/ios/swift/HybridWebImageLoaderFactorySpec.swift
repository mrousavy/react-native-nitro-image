///
/// HybridWebImageLoaderFactorySpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridWebImageLoaderFactorySpec``
public protocol HybridWebImageLoaderFactorySpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func createWebImageLoader(url: String, options: AsyncImageLoadOptions?) throws -> (any HybridWebImageLoaderSpec)
}

/// See ``HybridWebImageLoaderFactorySpec``
public class HybridWebImageLoaderFactorySpec_base {
  private weak var cxxWrapper: HybridWebImageLoaderFactorySpec_cxx? = nil
  public func getCxxWrapper() -> HybridWebImageLoaderFactorySpec_cxx {
  #if DEBUG
    guard self is HybridWebImageLoaderFactorySpec else {
      fatalError("`self` is not a `HybridWebImageLoaderFactorySpec`! Did you accidentally inherit from `HybridWebImageLoaderFactorySpec_base` instead of `HybridWebImageLoaderFactorySpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridWebImageLoaderFactorySpec_cxx(self as! HybridWebImageLoaderFactorySpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the WebImageLoaderFactory HybridObject.
 * Implement this protocol to create Swift-based instances of WebImageLoaderFactory.
 * ```swift
 * class HybridWebImageLoaderFactory : HybridWebImageLoaderFactorySpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridWebImageLoaderFactorySpec = HybridWebImageLoaderFactorySpec_protocol & HybridWebImageLoaderFactorySpec_base
