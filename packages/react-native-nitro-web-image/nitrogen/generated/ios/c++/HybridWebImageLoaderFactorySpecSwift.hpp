///
/// HybridWebImageLoaderFactorySpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridWebImageLoaderFactorySpec.hpp"

// Forward declaration of `HybridWebImageLoaderFactorySpec_cxx` to properly resolve imports.
namespace NitroWebImage { class HybridWebImageLoaderFactorySpec_cxx; }

// Forward declaration of `HybridWebImageLoaderSpec` to properly resolve imports.
namespace margelo::nitro::web::image { class HybridWebImageLoaderSpec; }
// Forward declaration of `AsyncImageLoadOptions` to properly resolve imports.
namespace margelo::nitro::web::image { struct AsyncImageLoadOptions; }
// Forward declaration of `AsyncImagePriority` to properly resolve imports.
namespace margelo::nitro::web::image { enum class AsyncImagePriority; }

#include <memory>
#include "HybridWebImageLoaderSpec.hpp"
#include <string>
#include <optional>
#include "AsyncImageLoadOptions.hpp"
#include "AsyncImagePriority.hpp"

#include "NitroWebImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::web::image {

  /**
   * The C++ part of HybridWebImageLoaderFactorySpec_cxx.swift.
   *
   * HybridWebImageLoaderFactorySpecSwift (C++) accesses HybridWebImageLoaderFactorySpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridWebImageLoaderFactorySpec_cxx can directly inherit from the C++ class HybridWebImageLoaderFactorySpec
   * to simplify the whole structure and memory management.
   */
  class HybridWebImageLoaderFactorySpecSwift: public virtual HybridWebImageLoaderFactorySpec {
  public:
    // Constructor from a Swift instance
    explicit HybridWebImageLoaderFactorySpecSwift(const NitroWebImage::HybridWebImageLoaderFactorySpec_cxx& swiftPart):
      HybridObject(HybridWebImageLoaderFactorySpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroWebImage::HybridWebImageLoaderFactorySpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<margelo::nitro::web::image::HybridWebImageLoaderSpec> createWebImageLoader(const std::string& url, const std::optional<AsyncImageLoadOptions>& options) override {
      auto __result = _swiftPart.createWebImageLoader(url, options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroWebImage::HybridWebImageLoaderFactorySpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::web::image
