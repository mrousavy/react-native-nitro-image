///
/// AsyncImageLoadOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `AsyncImagePriority` to properly resolve imports.
namespace margelo::nitro::image { enum class AsyncImagePriority; }

#include <optional>
#include "AsyncImagePriority.hpp"

namespace margelo::nitro::image {

  /**
   * A struct which can be represented as a JavaScript object (AsyncImageLoadOptions).
   */
  struct AsyncImageLoadOptions {
  public:
    std::optional<AsyncImagePriority> priority     SWIFT_PRIVATE;
    std::optional<bool> forceRefresh     SWIFT_PRIVATE;
    std::optional<bool> continueInBackground     SWIFT_PRIVATE;
    std::optional<bool> allowInvalidSSLCertificates     SWIFT_PRIVATE;
    std::optional<bool> scaleDownLargeImages     SWIFT_PRIVATE;
    std::optional<bool> queryMemoryDataSync     SWIFT_PRIVATE;
    std::optional<bool> queryDiskDataSync     SWIFT_PRIVATE;
    std::optional<bool> decodeImage     SWIFT_PRIVATE;

  public:
    AsyncImageLoadOptions() = default;
    explicit AsyncImageLoadOptions(std::optional<AsyncImagePriority> priority, std::optional<bool> forceRefresh, std::optional<bool> continueInBackground, std::optional<bool> allowInvalidSSLCertificates, std::optional<bool> scaleDownLargeImages, std::optional<bool> queryMemoryDataSync, std::optional<bool> queryDiskDataSync, std::optional<bool> decodeImage): priority(priority), forceRefresh(forceRefresh), continueInBackground(continueInBackground), allowInvalidSSLCertificates(allowInvalidSSLCertificates), scaleDownLargeImages(scaleDownLargeImages), queryMemoryDataSync(queryMemoryDataSync), queryDiskDataSync(queryDiskDataSync), decodeImage(decodeImage) {}
  };

} // namespace margelo::nitro::image

namespace margelo::nitro {

  using namespace margelo::nitro::image;

  // C++ AsyncImageLoadOptions <> JS AsyncImageLoadOptions (object)
  template <>
  struct JSIConverter<AsyncImageLoadOptions> final {
    static inline AsyncImageLoadOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return AsyncImageLoadOptions(
        JSIConverter<std::optional<AsyncImagePriority>>::fromJSI(runtime, obj.getProperty(runtime, "priority")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "forceRefresh")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "continueInBackground")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "allowInvalidSSLCertificates")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "scaleDownLargeImages")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "queryMemoryDataSync")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "queryDiskDataSync")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "decodeImage"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const AsyncImageLoadOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "priority", JSIConverter<std::optional<AsyncImagePriority>>::toJSI(runtime, arg.priority));
      obj.setProperty(runtime, "forceRefresh", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.forceRefresh));
      obj.setProperty(runtime, "continueInBackground", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.continueInBackground));
      obj.setProperty(runtime, "allowInvalidSSLCertificates", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.allowInvalidSSLCertificates));
      obj.setProperty(runtime, "scaleDownLargeImages", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.scaleDownLargeImages));
      obj.setProperty(runtime, "queryMemoryDataSync", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.queryMemoryDataSync));
      obj.setProperty(runtime, "queryDiskDataSync", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.queryDiskDataSync));
      obj.setProperty(runtime, "decodeImage", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.decodeImage));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<AsyncImagePriority>>::canConvert(runtime, obj.getProperty(runtime, "priority"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "forceRefresh"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "continueInBackground"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "allowInvalidSSLCertificates"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "scaleDownLargeImages"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "queryMemoryDataSync"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "queryDiskDataSync"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "decodeImage"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
