///
/// JAsyncImagePriority.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "AsyncImagePriority.hpp"

namespace margelo::nitro::web::image {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "AsyncImagePriority" and the the Kotlin enum "AsyncImagePriority".
   */
  struct JAsyncImagePriority final: public jni::JavaClass<JAsyncImagePriority> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/web/image/AsyncImagePriority;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum AsyncImagePriority.
     */
    [[maybe_unused]]
    [[nodiscard]]
    AsyncImagePriority toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<AsyncImagePriority>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JAsyncImagePriority> fromCpp(AsyncImagePriority value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldLOW = clazz->getStaticField<JAsyncImagePriority>("LOW");
      static const auto fieldDEFAULT = clazz->getStaticField<JAsyncImagePriority>("DEFAULT");
      static const auto fieldHIGH = clazz->getStaticField<JAsyncImagePriority>("HIGH");
      
      switch (value) {
        case AsyncImagePriority::LOW:
          return clazz->getStaticFieldValue(fieldLOW);
        case AsyncImagePriority::DEFAULT:
          return clazz->getStaticFieldValue(fieldDEFAULT);
        case AsyncImagePriority::HIGH:
          return clazz->getStaticFieldValue(fieldHIGH);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::web::image
