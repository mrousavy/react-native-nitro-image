///
/// JHybridWebImageLoaderSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridWebImageLoaderSpec.hpp"





namespace margelo::nitro::web::image {

  jni::local_ref<JHybridWebImageLoaderSpec::jhybriddata> JHybridWebImageLoaderSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridWebImageLoaderSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridWebImageLoaderSpec::initHybrid),
    });
  }

  size_t JHybridWebImageLoaderSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridWebImageLoaderSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<std::shared_ptr<margelo::nitro::image::HybridImageSpec>>> JHybridWebImageLoaderSpec::loadImage() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("loadImage");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::shared_ptr<margelo::nitro::image::HybridImageSpec>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<margelo::nitro::image::JHybridImageSpec::javaobject>(__boxedResult);
        __promise->resolve(JNISharedPtr::make_shared_from_jni<margelo::nitro::image::JHybridImageSpec>(jni::make_global(__result)));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  void JHybridWebImageLoaderSpec::requestImage(const std::shared_ptr<margelo::nitro::web::image::HybridNitroImageViewSpec>& forView) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JHybridNitroImageViewSpec::javaobject> /* forView */)>("requestImage");
    method(_javaPart, std::dynamic_pointer_cast<JHybridNitroImageViewSpec>(forView)->getJavaPart());
  }
  void JHybridWebImageLoaderSpec::dropImage(const std::shared_ptr<margelo::nitro::web::image::HybridNitroImageViewSpec>& forView) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JHybridNitroImageViewSpec::javaobject> /* forView */)>("dropImage");
    method(_javaPart, std::dynamic_pointer_cast<JHybridNitroImageViewSpec>(forView)->getJavaPart());
  }

} // namespace margelo::nitro::web::image
