///
/// RawPixelData.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `PixelFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class PixelFormat; }

#include <NitroModules/ArrayBuffer.hpp>
#include "PixelFormat.hpp"

namespace margelo::nitro::image {

  /**
   * A struct which can be represented as a JavaScript object (RawPixelData).
   */
  struct RawPixelData {
  public:
    std::shared_ptr<ArrayBuffer> buffer     SWIFT_PRIVATE;
    double width     SWIFT_PRIVATE;
    double height     SWIFT_PRIVATE;
    PixelFormat pixelFormat     SWIFT_PRIVATE;

  public:
    RawPixelData() = default;
    explicit RawPixelData(std::shared_ptr<ArrayBuffer> buffer, double width, double height, PixelFormat pixelFormat): buffer(buffer), width(width), height(height), pixelFormat(pixelFormat) {}
  };

} // namespace margelo::nitro::image

namespace margelo::nitro {

  // C++ RawPixelData <> JS RawPixelData (object)
  template <>
  struct JSIConverter<margelo::nitro::image::RawPixelData> final {
    static inline margelo::nitro::image::RawPixelData fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::image::RawPixelData(
        JSIConverter<std::shared_ptr<ArrayBuffer>>::fromJSI(runtime, obj.getProperty(runtime, "buffer")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "width")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "height")),
        JSIConverter<margelo::nitro::image::PixelFormat>::fromJSI(runtime, obj.getProperty(runtime, "pixelFormat"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::image::RawPixelData& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "buffer", JSIConverter<std::shared_ptr<ArrayBuffer>>::toJSI(runtime, arg.buffer));
      obj.setProperty(runtime, "width", JSIConverter<double>::toJSI(runtime, arg.width));
      obj.setProperty(runtime, "height", JSIConverter<double>::toJSI(runtime, arg.height));
      obj.setProperty(runtime, "pixelFormat", JSIConverter<margelo::nitro::image::PixelFormat>::toJSI(runtime, arg.pixelFormat));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<std::shared_ptr<ArrayBuffer>>::canConvert(runtime, obj.getProperty(runtime, "buffer"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "width"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "height"))) return false;
      if (!JSIConverter<margelo::nitro::image::PixelFormat>::canConvert(runtime, obj.getProperty(runtime, "pixelFormat"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
