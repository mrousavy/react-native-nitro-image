///
/// JPixelFormat.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "PixelFormat.hpp"

namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "PixelFormat" and the the Kotlin enum "PixelFormat".
   */
  struct JPixelFormat final: public jni::JavaClass<JPixelFormat> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/PixelFormat;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum PixelFormat.
     */
    [[maybe_unused]]
    [[nodiscard]]
    PixelFormat toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<PixelFormat>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JPixelFormat> fromCpp(PixelFormat value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldARGB = clazz->getStaticField<JPixelFormat>("ARGB");
      static const auto fieldBGRA = clazz->getStaticField<JPixelFormat>("BGRA");
      static const auto fieldABGR = clazz->getStaticField<JPixelFormat>("ABGR");
      static const auto fieldRGBA = clazz->getStaticField<JPixelFormat>("RGBA");
      static const auto fieldXRGB = clazz->getStaticField<JPixelFormat>("XRGB");
      static const auto fieldBGRX = clazz->getStaticField<JPixelFormat>("BGRX");
      static const auto fieldXBGR = clazz->getStaticField<JPixelFormat>("XBGR");
      static const auto fieldRGBX = clazz->getStaticField<JPixelFormat>("RGBX");
      static const auto fieldRGB = clazz->getStaticField<JPixelFormat>("RGB");
      static const auto fieldBGR = clazz->getStaticField<JPixelFormat>("BGR");
      static const auto fieldUNKNOWN = clazz->getStaticField<JPixelFormat>("UNKNOWN");
      
      switch (value) {
        case PixelFormat::ARGB:
          return clazz->getStaticFieldValue(fieldARGB);
        case PixelFormat::BGRA:
          return clazz->getStaticFieldValue(fieldBGRA);
        case PixelFormat::ABGR:
          return clazz->getStaticFieldValue(fieldABGR);
        case PixelFormat::RGBA:
          return clazz->getStaticFieldValue(fieldRGBA);
        case PixelFormat::XRGB:
          return clazz->getStaticFieldValue(fieldXRGB);
        case PixelFormat::BGRX:
          return clazz->getStaticFieldValue(fieldBGRX);
        case PixelFormat::XBGR:
          return clazz->getStaticFieldValue(fieldXBGR);
        case PixelFormat::RGBX:
          return clazz->getStaticFieldValue(fieldRGBX);
        case PixelFormat::RGB:
          return clazz->getStaticFieldValue(fieldRGB);
        case PixelFormat::BGR:
          return clazz->getStaticFieldValue(fieldBGR);
        case PixelFormat::UNKNOWN:
          return clazz->getStaticFieldValue(fieldUNKNOWN);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::image
