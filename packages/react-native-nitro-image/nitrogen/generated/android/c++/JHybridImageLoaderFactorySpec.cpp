///
/// JHybridImageLoaderFactorySpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridImageLoaderFactorySpec.hpp"

// Forward declaration of `HybridImageLoaderSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageLoaderSpec; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <memory>
#include "HybridImageLoaderSpec.hpp"
#include "JHybridImageLoaderSpec.hpp"
#include <string>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>

namespace margelo::nitro::image {

  jni::local_ref<JHybridImageLoaderFactorySpec::jhybriddata> JHybridImageLoaderFactorySpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridImageLoaderFactorySpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridImageLoaderFactorySpec::initHybrid),
    });
  }

  size_t JHybridImageLoaderFactorySpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridImageLoaderFactorySpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<HybridImageLoaderSpec> JHybridImageLoaderFactorySpec::createFileImageLoader(const std::string& filePath) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridImageLoaderSpec::javaobject>(jni::alias_ref<jni::JString> /* filePath */)>("createFileImageLoader");
    auto __result = method(_javaPart, jni::make_jstring(filePath));
    return __result->cthis()->shared_cast<JHybridImageLoaderSpec>();
  }
  std::shared_ptr<HybridImageLoaderSpec> JHybridImageLoaderFactorySpec::createResourceImageLoader(const std::string& name) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridImageLoaderSpec::javaobject>(jni::alias_ref<jni::JString> /* name */)>("createResourceImageLoader");
    auto __result = method(_javaPart, jni::make_jstring(name));
    return __result->cthis()->shared_cast<JHybridImageLoaderSpec>();
  }
  std::shared_ptr<HybridImageLoaderSpec> JHybridImageLoaderFactorySpec::createSymbolImageLoader(const std::string& symbolName) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridImageLoaderSpec::javaobject>(jni::alias_ref<jni::JString> /* symbolName */)>("createSymbolImageLoader");
    auto __result = method(_javaPart, jni::make_jstring(symbolName));
    return __result->cthis()->shared_cast<JHybridImageLoaderSpec>();
  }
  std::shared_ptr<HybridImageLoaderSpec> JHybridImageLoaderFactorySpec::createArrayBufferImageLoader(const std::shared_ptr<ArrayBuffer>& buffer) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridImageLoaderSpec::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* buffer */)>("createArrayBufferImageLoader");
    auto __result = method(_javaPart, JArrayBuffer::wrap(buffer));
    return __result->cthis()->shared_cast<JHybridImageLoaderSpec>();
  }

} // namespace margelo::nitro::image
