///
/// JHybridImageSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridImageSpec.hpp"

// Forward declaration of `RawPixelData` to properly resolve imports.
namespace margelo::nitro::image { struct RawPixelData; }
// Forward declaration of `PixelFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class PixelFormat; }
// Forward declaration of `EncodedImageData` to properly resolve imports.
namespace margelo::nitro::image { struct EncodedImageData; }
// Forward declaration of `ImageFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class ImageFormat; }
// Forward declaration of `HybridImageSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpec; }

#include "RawPixelData.hpp"
#include "JRawPixelData.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include "PixelFormat.hpp"
#include "JPixelFormat.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "EncodedImageData.hpp"
#include "JEncodedImageData.hpp"
#include "ImageFormat.hpp"
#include "JImageFormat.hpp"
#include <memory>
#include "HybridImageSpec.hpp"
#include "JHybridImageSpec.hpp"
#include <string>
#include <optional>

namespace margelo::nitro::image {

  jni::local_ref<JHybridImageSpec::jhybriddata> JHybridImageSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridImageSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridImageSpec::initHybrid),
    });
  }

  size_t JHybridImageSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridImageSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  double JHybridImageSpec::getWidth() {
    static const auto method = javaClassStatic()->getMethod<double()>("getWidth");
    auto __result = method(_javaPart);
    return __result;
  }
  double JHybridImageSpec::getHeight() {
    static const auto method = javaClassStatic()->getMethod<double()>("getHeight");
    auto __result = method(_javaPart);
    return __result;
  }

  // Methods
  RawPixelData JHybridImageSpec::toRawPixelData(std::optional<bool> allowGpu) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JRawPixelData>(jni::alias_ref<jni::JBoolean> /* allowGpu */)>("toRawPixelData");
    auto __result = method(_javaPart, allowGpu.has_value() ? jni::JBoolean::valueOf(allowGpu.value()) : nullptr);
    return __result->toCpp();
  }
  std::shared_ptr<Promise<RawPixelData>> JHybridImageSpec::toRawPixelDataAsync(std::optional<bool> allowGpu) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JBoolean> /* allowGpu */)>("toRawPixelDataAsync");
    auto __result = method(_javaPart, allowGpu.has_value() ? jni::JBoolean::valueOf(allowGpu.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<RawPixelData>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JRawPixelData>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  EncodedImageData JHybridImageSpec::toEncodedImageData(ImageFormat format, std::optional<double> quality) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JEncodedImageData>(jni::alias_ref<JImageFormat> /* format */, jni::alias_ref<jni::JDouble> /* quality */)>("toEncodedImageData");
    auto __result = method(_javaPart, JImageFormat::fromCpp(format), quality.has_value() ? jni::JDouble::valueOf(quality.value()) : nullptr);
    return __result->toCpp();
  }
  std::shared_ptr<Promise<EncodedImageData>> JHybridImageSpec::toEncodedImageDataAsync(ImageFormat format, std::optional<double> quality) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JImageFormat> /* format */, jni::alias_ref<jni::JDouble> /* quality */)>("toEncodedImageDataAsync");
    auto __result = method(_javaPart, JImageFormat::fromCpp(format), quality.has_value() ? jni::JDouble::valueOf(quality.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<EncodedImageData>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JEncodedImageData>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<HybridImageSpec> JHybridImageSpec::resize(double width, double height) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridImageSpec::javaobject>(double /* width */, double /* height */)>("resize");
    auto __result = method(_javaPart, width, height);
    return __result->cthis()->shared_cast<JHybridImageSpec>();
  }
  std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>> JHybridImageSpec::resizeAsync(double width, double height) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(double /* width */, double /* height */)>("resizeAsync");
    auto __result = method(_javaPart, width, height);
    return [&]() {
      auto __promise = Promise<std::shared_ptr<HybridImageSpec>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JHybridImageSpec::javaobject>(__boxedResult);
        __promise->resolve(__result->cthis()->shared_cast<JHybridImageSpec>());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<HybridImageSpec> JHybridImageSpec::crop(double startX, double startY, double endX, double endY) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridImageSpec::javaobject>(double /* startX */, double /* startY */, double /* endX */, double /* endY */)>("crop");
    auto __result = method(_javaPart, startX, startY, endX, endY);
    return __result->cthis()->shared_cast<JHybridImageSpec>();
  }
  std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>> JHybridImageSpec::cropAsync(double startX, double startY, double endX, double endY) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(double /* startX */, double /* startY */, double /* endX */, double /* endY */)>("cropAsync");
    auto __result = method(_javaPart, startX, startY, endX, endY);
    return [&]() {
      auto __promise = Promise<std::shared_ptr<HybridImageSpec>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JHybridImageSpec::javaobject>(__boxedResult);
        __promise->resolve(__result->cthis()->shared_cast<JHybridImageSpec>());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridImageSpec::saveToFileAsync(const std::string& path, ImageFormat format, std::optional<double> quality) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* path */, jni::alias_ref<JImageFormat> /* format */, jni::alias_ref<jni::JDouble> /* quality */)>("saveToFileAsync");
    auto __result = method(_javaPart, jni::make_jstring(path), JImageFormat::fromCpp(format), quality.has_value() ? jni::JDouble::valueOf(quality.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::string>> JHybridImageSpec::saveToTemporaryFileAsync(ImageFormat format, std::optional<double> quality) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JImageFormat> /* format */, jni::alias_ref<jni::JDouble> /* quality */)>("saveToTemporaryFileAsync");
    auto __result = method(_javaPart, JImageFormat::fromCpp(format), quality.has_value() ? jni::JDouble::valueOf(quality.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<ArrayBuffer> JHybridImageSpec::toThumbHash() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>()>("toThumbHash");
    auto __result = method(_javaPart);
    return __result->cthis()->getArrayBuffer();
  }
  std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> JHybridImageSpec::toThumbHashAsync() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("toThumbHashAsync");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::shared_ptr<ArrayBuffer>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JArrayBuffer::javaobject>(__boxedResult);
        __promise->resolve(__result->cthis()->getArrayBuffer());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::image
