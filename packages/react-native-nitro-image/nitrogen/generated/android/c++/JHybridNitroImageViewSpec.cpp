///
/// JHybridNitroImageViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroImageViewSpec.hpp"

// Forward declaration of `HybridImageSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpec; }
// Forward declaration of `HybridImageLoaderSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageLoaderSpec; }
// Forward declaration of `ResizeMode` to properly resolve imports.
namespace margelo::nitro::image { enum class ResizeMode; }

#include <memory>
#include "HybridImageSpec.hpp"
#include "HybridImageLoaderSpec.hpp"
#include <variant>
#include <optional>
#include "JVariant_HybridImageSpec_HybridImageLoaderSpec.hpp"
#include "JHybridImageSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include "JHybridImageLoaderSpec.hpp"
#include "ResizeMode.hpp"
#include "JResizeMode.hpp"
#include <string>

namespace margelo::nitro::image {

  jni::local_ref<JHybridNitroImageViewSpec::jhybriddata> JHybridNitroImageViewSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroImageViewSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroImageViewSpec::initHybrid),
    });
  }

  size_t JHybridNitroImageViewSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroImageViewSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  std::optional<std::variant<std::shared_ptr<margelo::nitro::image::HybridImageSpec>, std::shared_ptr<margelo::nitro::image::HybridImageLoaderSpec>>> JHybridNitroImageViewSpec::getImage() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JVariant_HybridImageSpec_HybridImageLoaderSpec>()>("getImage");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridNitroImageViewSpec::setImage(const std::optional<std::variant<std::shared_ptr<margelo::nitro::image::HybridImageSpec>, std::shared_ptr<margelo::nitro::image::HybridImageLoaderSpec>>>& image) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JVariant_HybridImageSpec_HybridImageLoaderSpec> /* image */)>("setImage");
    method(_javaPart, image.has_value() ? JVariant_HybridImageSpec_HybridImageLoaderSpec::fromCpp(image.value()) : nullptr);
  }
  std::optional<ResizeMode> JHybridNitroImageViewSpec::getResizeMode() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JResizeMode>()>("getResizeMode");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridNitroImageViewSpec::setResizeMode(std::optional<ResizeMode> resizeMode) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JResizeMode> /* resizeMode */)>("setResizeMode");
    method(_javaPart, resizeMode.has_value() ? JResizeMode::fromCpp(resizeMode.value()) : nullptr);
  }
  std::optional<std::string> JHybridNitroImageViewSpec::getRecyclingKey() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getRecyclingKey");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  void JHybridNitroImageViewSpec::setRecyclingKey(const std::optional<std::string>& recyclingKey) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* recyclingKey */)>("setRecyclingKey");
    method(_javaPart, recyclingKey.has_value() ? jni::make_jstring(recyclingKey.value()) : nullptr);
  }

  // Methods
  

} // namespace margelo::nitro::image
