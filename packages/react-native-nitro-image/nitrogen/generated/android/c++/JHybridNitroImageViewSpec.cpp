///
/// JHybridNitroImageViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroImageViewSpec.hpp"

// Forward declaration of `HybridImageSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpec; }
// Forward declaration of `ResizeMode` to properly resolve imports.
namespace margelo::nitro::image { enum class ResizeMode; }

#include <optional>
#include <memory>
#include "HybridImageSpec.hpp"
#include "JHybridImageSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include "ResizeMode.hpp"
#include "JResizeMode.hpp"

namespace margelo::nitro::image {

  jni::local_ref<JHybridNitroImageViewSpec::jhybriddata> JHybridNitroImageViewSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroImageViewSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroImageViewSpec::initHybrid),
    });
  }

  size_t JHybridNitroImageViewSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::optional<std::shared_ptr<margelo::nitro::image::HybridImageSpec>> JHybridNitroImageViewSpec::getImage() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridImageSpec::javaobject>()>("getImage");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(JNISharedPtr::make_shared_from_jni<JHybridImageSpec>(jni::make_global(__result))) : std::nullopt;
  }
  void JHybridNitroImageViewSpec::setImage(const std::optional<std::shared_ptr<margelo::nitro::image::HybridImageSpec>>& image) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JHybridImageSpec::javaobject> /* image */)>("setImage");
    method(_javaPart, image.has_value() ? std::dynamic_pointer_cast<JHybridImageSpec>(image.value())->getJavaPart() : nullptr);
  }
  std::optional<ResizeMode> JHybridNitroImageViewSpec::getResizeMode() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JResizeMode>()>("getResizeMode");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridNitroImageViewSpec::setResizeMode(std::optional<ResizeMode> resizeMode) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JResizeMode> /* resizeMode */)>("setResizeMode");
    method(_javaPart, resizeMode.has_value() ? JResizeMode::fromCpp(resizeMode.value()) : nullptr);
  }

  // Methods
  

} // namespace margelo::nitro::image
