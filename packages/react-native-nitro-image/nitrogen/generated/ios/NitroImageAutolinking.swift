///
/// NitroImageAutolinking.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

public final class NitroImageAutolinking {
  public typealias bridge = margelo.nitro.image.bridge.swift

  /**
   * Creates an instance of a Swift class that implements `HybridImageFactorySpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridImageFactorySpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridImageFactory`).
   */
  public static func createImageFactory() -> bridge.std__shared_ptr_HybridImageFactorySpec_ {
    let hybridObject = HybridImageFactory()
    return { () -> bridge.std__shared_ptr_HybridImageFactorySpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
  
  /**
   * Creates an instance of a Swift class that implements `HybridImageLoaderFactorySpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridImageLoaderFactorySpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridImageLoaderFactory`).
   */
  public static func createImageLoaderFactory() -> bridge.std__shared_ptr_HybridImageLoaderFactorySpec_ {
    let hybridObject = HybridImageLoaderFactory()
    return { () -> bridge.std__shared_ptr_HybridImageLoaderFactorySpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
  
  /**
   * Creates an instance of a Swift class that implements `HybridImageUtilsSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridImageUtilsSpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridImageUtils`).
   */
  public static func createImageUtils() -> bridge.std__shared_ptr_HybridImageUtilsSpec_ {
    let hybridObject = HybridImageUtils()
    return { () -> bridge.std__shared_ptr_HybridImageUtilsSpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
  
  /**
   * Creates an instance of a Swift class that implements `HybridNitroImageViewSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridNitroImageViewSpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridImageView`).
   */
  public static func createNitroImageView() -> bridge.std__shared_ptr_HybridNitroImageViewSpec_ {
    let hybridObject = HybridImageView()
    return { () -> bridge.std__shared_ptr_HybridNitroImageViewSpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
}
