///
/// HybridImageLoaderSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridImageLoaderSpec.hpp"

// Forward declaration of `HybridImageLoaderSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageLoaderSpec_cxx; }

// Forward declaration of `HybridImageSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpec; }
// Forward declaration of `HybridNitroImageViewSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridNitroImageViewSpec; }

#include <memory>
#include "HybridImageSpec.hpp"
#include <NitroModules/Promise.hpp>
#include "HybridNitroImageViewSpec.hpp"

#include "NitroImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::image {

  /**
   * The C++ part of HybridImageLoaderSpec_cxx.swift.
   *
   * HybridImageLoaderSpecSwift (C++) accesses HybridImageLoaderSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridImageLoaderSpec_cxx can directly inherit from the C++ class HybridImageLoaderSpec
   * to simplify the whole structure and memory management.
   */
  class HybridImageLoaderSpecSwift: public virtual HybridImageLoaderSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridImageLoaderSpecSwift(const NitroImage::HybridImageLoaderSpec_cxx& swiftPart):
      HybridObject(HybridImageLoaderSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridImageLoaderSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::shared_ptr<margelo::nitro::image::HybridImageSpec>>> loadImage() override {
      auto __result = _swiftPart.loadImage();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void requestImage(const std::shared_ptr<margelo::nitro::image::HybridNitroImageViewSpec>& forView) override {
      auto __result = _swiftPart.requestImage(forView);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void dropImage(const std::shared_ptr<margelo::nitro::image::HybridNitroImageViewSpec>& forView) override {
      auto __result = _swiftPart.dropImage(forView);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroImage::HybridImageLoaderSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::image
