///
/// HybridImageUtilsSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridImageUtilsSpec.hpp"

// Forward declaration of `HybridImageUtilsSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageUtilsSpec_cxx; }

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }

#include <string>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>

#include "NitroImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::image {

  /**
   * The C++ part of HybridImageUtilsSpec_cxx.swift.
   *
   * HybridImageUtilsSpecSwift (C++) accesses HybridImageUtilsSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridImageUtilsSpec_cxx can directly inherit from the C++ class HybridImageUtilsSpec
   * to simplify the whole structure and memory management.
   */
  class HybridImageUtilsSpecSwift: public virtual HybridImageUtilsSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridImageUtilsSpecSwift(const NitroImage::HybridImageUtilsSpec_cxx& swiftPart):
      HybridObject(HybridImageUtilsSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridImageUtilsSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::string thumbHashToBase64String(const std::shared_ptr<ArrayBuffer>& thumbhash) override {
      auto __result = _swiftPart.thumbHashToBase64String(ArrayBufferHolder(thumbhash));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<ArrayBuffer> thumbhashFromBase64String(const std::string& thumbhashBase64) override {
      auto __result = _swiftPart.thumbhashFromBase64String(thumbhashBase64);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroImage::HybridImageUtilsSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::image
