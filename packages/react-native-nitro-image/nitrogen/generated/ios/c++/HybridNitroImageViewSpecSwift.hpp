///
/// HybridNitroImageViewSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroImageViewSpec.hpp"

// Forward declaration of `HybridNitroImageViewSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridNitroImageViewSpec_cxx; }

// Forward declaration of `HybridImageSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpec; }
// Forward declaration of `HybridImageLoaderSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageLoaderSpec; }
// Forward declaration of `ResizeMode` to properly resolve imports.
namespace margelo::nitro::image { enum class ResizeMode; }

#include <memory>
#include "HybridImageSpec.hpp"
#include "HybridImageLoaderSpec.hpp"
#include <variant>
#include <optional>
#include "ResizeMode.hpp"
#include <string>

#include "NitroImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::image {

  /**
   * The C++ part of HybridNitroImageViewSpec_cxx.swift.
   *
   * HybridNitroImageViewSpecSwift (C++) accesses HybridNitroImageViewSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroImageViewSpec_cxx can directly inherit from the C++ class HybridNitroImageViewSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroImageViewSpecSwift: public virtual HybridNitroImageViewSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroImageViewSpecSwift(const NitroImage::HybridNitroImageViewSpec_cxx& swiftPart):
      HybridObject(HybridNitroImageViewSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridNitroImageViewSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline std::optional<std::variant<std::shared_ptr<margelo::nitro::image::HybridImageSpec>, std::shared_ptr<margelo::nitro::image::HybridImageLoaderSpec>>> getImage() noexcept override {
      auto __result = _swiftPart.getImage();
      return __result;
    }
    inline void setImage(const std::optional<std::variant<std::shared_ptr<margelo::nitro::image::HybridImageSpec>, std::shared_ptr<margelo::nitro::image::HybridImageLoaderSpec>>>& image) noexcept override {
      _swiftPart.setImage(image);
    }
    inline std::optional<ResizeMode> getResizeMode() noexcept override {
      auto __result = _swiftPart.getResizeMode();
      return __result;
    }
    inline void setResizeMode(std::optional<ResizeMode> resizeMode) noexcept override {
      _swiftPart.setResizeMode(resizeMode);
    }
    inline std::optional<std::string> getRecyclingKey() noexcept override {
      auto __result = _swiftPart.getRecyclingKey();
      return __result;
    }
    inline void setRecyclingKey(const std::optional<std::string>& recyclingKey) noexcept override {
      _swiftPart.setRecyclingKey(recyclingKey);
    }

  public:
    // Methods
    

  private:
    NitroImage::HybridNitroImageViewSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::image
