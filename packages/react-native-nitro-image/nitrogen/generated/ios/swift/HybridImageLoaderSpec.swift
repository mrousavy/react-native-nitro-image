///
/// HybridImageLoaderSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridImageLoaderSpec``
public protocol HybridImageLoaderSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func loadImage() throws -> Promise<(any HybridImageSpec)>
  func requestImage(forView: (any HybridNitroImageViewSpec)) throws -> Void
  func dropImage(forView: (any HybridNitroImageViewSpec)) throws -> Void
}

/// See ``HybridImageLoaderSpec``
open class HybridImageLoaderSpec_base {
  private weak var cxxWrapper: HybridImageLoaderSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridImageLoaderSpec_cxx {
  #if DEBUG
    guard self is HybridImageLoaderSpec else {
      fatalError("`self` is not a `HybridImageLoaderSpec`! Did you accidentally inherit from `HybridImageLoaderSpec_base` instead of `HybridImageLoaderSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridImageLoaderSpec_cxx(self as! HybridImageLoaderSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ImageLoader HybridObject.
 * Implement this protocol to create Swift-based instances of ImageLoader.
 * ```swift
 * class HybridImageLoader : HybridImageLoaderSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridImageLoaderSpec = HybridImageLoaderSpec_protocol & HybridImageLoaderSpec_base
