///
/// HybridNitroImageViewSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridNitroImageViewSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridNitroImageViewSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::image::bridge::swift`)
   * from `NitroImage-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.image.bridge.swift

  /**
   * Holds an instance of the `HybridNitroImageViewSpec` Swift protocol.
   */
  private var __implementation: any HybridNitroImageViewSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_HybridNitroImageViewSpec_

  /**
   * Create a new `HybridNitroImageViewSpec_cxx` that wraps the given `HybridNitroImageViewSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridNitroImageViewSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridNitroImageViewSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridNitroImageViewSpec() -> any HybridNitroImageViewSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridNitroImageViewSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridNitroImageViewSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridNitroImageViewSpec_cxx {
    return Unmanaged<HybridNitroImageViewSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<HybridNitroImageViewSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_HybridNitroImageViewSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_HybridNitroImageViewSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_HybridNitroImageViewSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  public final var image: bridge.std__optional_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec___ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec___ in
        if let __unwrappedValue = self.__implementation.image {
          return bridge.create_std__optional_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec___({ () -> bridge.std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__ in
            switch __unwrappedValue {
              case .first(let __value):
                return bridge.create_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__({ () -> bridge.std__shared_ptr_HybridImageSpec_ in
                  let __cxxWrapped = __value.getCxxWrapper()
                  return __cxxWrapped.getCxxPart()
                }())
              case .second(let __value):
                return bridge.create_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__({ () -> bridge.std__shared_ptr_HybridImageLoaderSpec_ in
                  let __cxxWrapped = __value.getCxxWrapper()
                  return __cxxWrapped.getCxxPart()
                }())
            }
          }().variant)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.image = { () -> Variant__any_HybridImageSpec___any_HybridImageLoaderSpec_? in
        if let __unwrapped = newValue.value {
          return { () -> Variant__any_HybridImageSpec___any_HybridImageLoaderSpec_ in
            let __variant = bridge.std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__(__unwrapped)
            switch __variant.index() {
              case 0:
                let __actual = __variant.get_0()
                return .first({ () -> HybridImageSpec in
                  let __unsafePointer = bridge.get_std__shared_ptr_HybridImageSpec_(__actual)
                  let __instance = HybridImageSpec_cxx.fromUnsafe(__unsafePointer)
                  return __instance.getHybridImageSpec()
                }())
              case 1:
                let __actual = __variant.get_1()
                return .second({ () -> HybridImageLoaderSpec in
                  let __unsafePointer = bridge.get_std__shared_ptr_HybridImageLoaderSpec_(__actual)
                  let __instance = HybridImageLoaderSpec_cxx.fromUnsafe(__unsafePointer)
                  return __instance.getHybridImageLoaderSpec()
                }())
              default:
                fatalError("Variant can never have index \(__variant.index())!")
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var resizeMode: bridge.std__optional_ResizeMode_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_ResizeMode_ in
        if let __unwrappedValue = self.__implementation.resizeMode {
          return bridge.create_std__optional_ResizeMode_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.resizeMode = newValue.value
    }
  }
  
  public final var recyclingKey: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.recyclingKey {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.recyclingKey = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }

  // Methods
  public final func getView() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(__implementation.view).toOpaque()
  }
  
  public final func beforeUpdate() {
    __implementation.beforeUpdate()
  }
  
  public final func afterUpdate() {
    __implementation.afterUpdate()
  }
}
