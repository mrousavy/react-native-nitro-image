///
/// HybridImageLoaderFactorySpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridImageLoaderFactorySpec``
public protocol HybridImageLoaderFactorySpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func createFileImageLoader(filePath: String) throws -> (any HybridImageLoaderSpec)
  func createResourceImageLoader(name: String) throws -> (any HybridImageLoaderSpec)
  func createSymbolImageLoader(symbolName: String) throws -> (any HybridImageLoaderSpec)
  func createArrayBufferImageLoader(buffer: ArrayBuffer) throws -> (any HybridImageLoaderSpec)
}

/// See ``HybridImageLoaderFactorySpec``
open class HybridImageLoaderFactorySpec_base {
  private weak var cxxWrapper: HybridImageLoaderFactorySpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridImageLoaderFactorySpec_cxx {
  #if DEBUG
    guard self is HybridImageLoaderFactorySpec else {
      fatalError("`self` is not a `HybridImageLoaderFactorySpec`! Did you accidentally inherit from `HybridImageLoaderFactorySpec_base` instead of `HybridImageLoaderFactorySpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridImageLoaderFactorySpec_cxx(self as! HybridImageLoaderFactorySpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ImageLoaderFactory HybridObject.
 * Implement this protocol to create Swift-based instances of ImageLoaderFactory.
 * ```swift
 * class HybridImageLoaderFactory : HybridImageLoaderFactorySpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridImageLoaderFactorySpec = HybridImageLoaderFactorySpec_protocol & HybridImageLoaderFactorySpec_base
