///
/// NitroImage-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `HybridImageFactorySpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageFactorySpec; }
// Forward declaration of `HybridImageLoaderFactorySpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageLoaderFactorySpec; }
// Forward declaration of `HybridImageLoaderSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageLoaderSpec; }
// Forward declaration of `HybridImageSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageSpec; }
// Forward declaration of `HybridImageUtilsSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridImageUtilsSpec; }
// Forward declaration of `HybridNitroImageViewSpec` to properly resolve imports.
namespace margelo::nitro::image { class HybridNitroImageViewSpec; }
// Forward declaration of `PixelFormat` to properly resolve imports.
namespace margelo::nitro::image { enum class PixelFormat; }
// Forward declaration of `RawPixelData` to properly resolve imports.
namespace margelo::nitro::image { struct RawPixelData; }
// Forward declaration of `ResizeMode` to properly resolve imports.
namespace margelo::nitro::image { enum class ResizeMode; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridImageFactorySpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageFactorySpec_cxx; }
// Forward declaration of `HybridImageLoaderFactorySpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageLoaderFactorySpec_cxx; }
// Forward declaration of `HybridImageLoaderSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageLoaderSpec_cxx; }
// Forward declaration of `HybridImageSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageSpec_cxx; }
// Forward declaration of `HybridImageUtilsSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageUtilsSpec_cxx; }
// Forward declaration of `HybridNitroImageViewSpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridNitroImageViewSpec_cxx; }

// Include C++ defined types
#include "HybridImageFactorySpec.hpp"
#include "HybridImageLoaderFactorySpec.hpp"
#include "HybridImageLoaderSpec.hpp"
#include "HybridImageSpec.hpp"
#include "HybridImageUtilsSpec.hpp"
#include "HybridNitroImageViewSpec.hpp"
#include "PixelFormat.hpp"
#include "RawPixelData.hpp"
#include "ResizeMode.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <variant>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::image::bridge::swift {

  // pragma MARK: std::shared_ptr<Promise<RawPixelData>>
  /**
   * Specialized version of `std::shared_ptr<Promise<RawPixelData>>`.
   */
  using std__shared_ptr_Promise_RawPixelData__ = std::shared_ptr<Promise<RawPixelData>>;
  inline std::shared_ptr<Promise<RawPixelData>> create_std__shared_ptr_Promise_RawPixelData__() noexcept {
    return Promise<RawPixelData>::create();
  }
  inline PromiseHolder<RawPixelData> wrap_std__shared_ptr_Promise_RawPixelData__(std::shared_ptr<Promise<RawPixelData>> promise) noexcept {
    return PromiseHolder<RawPixelData>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const RawPixelData& /* result */)>
  /**
   * Specialized version of `std::function<void(const RawPixelData&)>`.
   */
  using Func_void_RawPixelData = std::function<void(const RawPixelData& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const RawPixelData& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_RawPixelData_Wrapper final {
  public:
    explicit Func_void_RawPixelData_Wrapper(std::function<void(const RawPixelData& /* result */)>&& func): _function(std::make_unique<std::function<void(const RawPixelData& /* result */)>>(std::move(func))) {}
    inline void call(RawPixelData result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const RawPixelData& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_RawPixelData create_Func_void_RawPixelData(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_RawPixelData_Wrapper wrap_Func_void_RawPixelData(Func_void_RawPixelData value) noexcept {
    return Func_void_RawPixelData_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_unique<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const noexcept {
      _function->operator()(error);
    }
  private:
    std::unique_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) noexcept {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>`.
   */
  using std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___ = std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>;
  inline std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> create_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___() noexcept {
    return Promise<std::shared_ptr<ArrayBuffer>>::create();
  }
  inline PromiseHolder<std::shared_ptr<ArrayBuffer>> wrap_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer___(std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> promise) noexcept {
    return PromiseHolder<std::shared_ptr<ArrayBuffer>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::shared_ptr<ArrayBuffer>&)>`.
   */
  using Func_void_std__shared_ptr_ArrayBuffer_ = std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::shared_ptr<ArrayBuffer>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__shared_ptr_ArrayBuffer__Wrapper final {
  public:
    explicit Func_void_std__shared_ptr_ArrayBuffer__Wrapper(std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>&& func): _function(std::make_unique<std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>>(std::move(func))) {}
    inline void call(ArrayBufferHolder result) const noexcept {
      _function->operator()(result.getArrayBuffer());
    }
  private:
    std::unique_ptr<std::function<void(const std::shared_ptr<ArrayBuffer>& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__shared_ptr_ArrayBuffer_ create_Func_void_std__shared_ptr_ArrayBuffer_(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_std__shared_ptr_ArrayBuffer__Wrapper wrap_Func_void_std__shared_ptr_ArrayBuffer_(Func_void_std__shared_ptr_ArrayBuffer_ value) noexcept {
    return Func_void_std__shared_ptr_ArrayBuffer__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<HybridImageSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridImageSpec>`.
   */
  using std__shared_ptr_HybridImageSpec_ = std::shared_ptr<HybridImageSpec>;
  std::shared_ptr<HybridImageSpec> create_std__shared_ptr_HybridImageSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridImageSpec_(std__shared_ptr_HybridImageSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridImageSpec>
  using std__weak_ptr_HybridImageSpec_ = std::weak_ptr<HybridImageSpec>;
  inline std__weak_ptr_HybridImageSpec_ weakify_std__shared_ptr_HybridImageSpec_(const std::shared_ptr<HybridImageSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>>`.
   */
  using std__shared_ptr_Promise_std__shared_ptr_HybridImageSpec___ = std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>>;
  inline std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>> create_std__shared_ptr_Promise_std__shared_ptr_HybridImageSpec___() noexcept {
    return Promise<std::shared_ptr<HybridImageSpec>>::create();
  }
  inline PromiseHolder<std::shared_ptr<HybridImageSpec>> wrap_std__shared_ptr_Promise_std__shared_ptr_HybridImageSpec___(std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>> promise) noexcept {
    return PromiseHolder<std::shared_ptr<HybridImageSpec>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<HybridImageSpec>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::shared_ptr<HybridImageSpec>&)>`.
   */
  using Func_void_std__shared_ptr_HybridImageSpec_ = std::function<void(const std::shared_ptr<HybridImageSpec>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::shared_ptr<HybridImageSpec>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__shared_ptr_HybridImageSpec__Wrapper final {
  public:
    explicit Func_void_std__shared_ptr_HybridImageSpec__Wrapper(std::function<void(const std::shared_ptr<HybridImageSpec>& /* result */)>&& func): _function(std::make_unique<std::function<void(const std::shared_ptr<HybridImageSpec>& /* result */)>>(std::move(func))) {}
    inline void call(std::shared_ptr<HybridImageSpec> result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const std::shared_ptr<HybridImageSpec>& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__shared_ptr_HybridImageSpec_ create_Func_void_std__shared_ptr_HybridImageSpec_(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_std__shared_ptr_HybridImageSpec__Wrapper wrap_Func_void_std__shared_ptr_HybridImageSpec_(Func_void_std__shared_ptr_HybridImageSpec_ value) noexcept {
    return Func_void_std__shared_ptr_HybridImageSpec__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<Promise<void>>
  /**
   * Specialized version of `std::shared_ptr<Promise<void>>`.
   */
  using std__shared_ptr_Promise_void__ = std::shared_ptr<Promise<void>>;
  inline std::shared_ptr<Promise<void>> create_std__shared_ptr_Promise_void__() noexcept {
    return Promise<void>::create();
  }
  inline PromiseHolder<void> wrap_std__shared_ptr_Promise_void__(std::shared_ptr<Promise<void>> promise) noexcept {
    return PromiseHolder<void>(std::move(promise));
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_unique<std::function<void()>>(std::move(func))) {}
    inline void call() const noexcept {
      _function->operator()();
    }
  private:
    std::unique_ptr<std::function<void()>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void create_Func_void(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_Wrapper wrap_Func_void(Func_void value) noexcept {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) noexcept {
    return std::optional<double>(value);
  }
  inline bool has_value_std__optional_double_(const std::optional<double>& optional) noexcept {
    return optional.has_value();
  }
  inline double get_std__optional_double_(const std::optional<double>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::string>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::string>>`.
   */
  using std__shared_ptr_Promise_std__string__ = std::shared_ptr<Promise<std::string>>;
  inline std::shared_ptr<Promise<std::string>> create_std__shared_ptr_Promise_std__string__() noexcept {
    return Promise<std::string>::create();
  }
  inline PromiseHolder<std::string> wrap_std__shared_ptr_Promise_std__string__(std::shared_ptr<Promise<std::string>> promise) noexcept {
    return PromiseHolder<std::string>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::string& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* result */)>&& func): _function(std::make_unique<std::function<void(const std::string& /* result */)>>(std::move(func))) {}
    inline void call(std::string result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const std::string& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__string create_Func_void_std__string(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_std__string_Wrapper wrap_Func_void_std__string(Func_void_std__string value) noexcept {
    return Func_void_std__string_Wrapper(std::move(value));
  }
  
  // pragma MARK: Result<RawPixelData>
  using Result_RawPixelData_ = Result<RawPixelData>;
  inline Result_RawPixelData_ create_Result_RawPixelData_(const RawPixelData& value) noexcept {
    return Result<RawPixelData>::withValue(value);
  }
  inline Result_RawPixelData_ create_Result_RawPixelData_(const std::exception_ptr& error) noexcept {
    return Result<RawPixelData>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<RawPixelData>>>
  using Result_std__shared_ptr_Promise_RawPixelData___ = Result<std::shared_ptr<Promise<RawPixelData>>>;
  inline Result_std__shared_ptr_Promise_RawPixelData___ create_Result_std__shared_ptr_Promise_RawPixelData___(const std::shared_ptr<Promise<RawPixelData>>& value) noexcept {
    return Result<std::shared_ptr<Promise<RawPixelData>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_RawPixelData___ create_Result_std__shared_ptr_Promise_RawPixelData___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<RawPixelData>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<ArrayBuffer>>
  using Result_std__shared_ptr_ArrayBuffer__ = Result<std::shared_ptr<ArrayBuffer>>;
  inline Result_std__shared_ptr_ArrayBuffer__ create_Result_std__shared_ptr_ArrayBuffer__(const std::shared_ptr<ArrayBuffer>& value) noexcept {
    return Result<std::shared_ptr<ArrayBuffer>>::withValue(value);
  }
  inline Result_std__shared_ptr_ArrayBuffer__ create_Result_std__shared_ptr_ArrayBuffer__(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<ArrayBuffer>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>
  using Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ = Result<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>;
  inline Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(const std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>& value) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____ create_Result_std__shared_ptr_Promise_std__shared_ptr_ArrayBuffer____(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<HybridImageSpec>>
  using Result_std__shared_ptr_HybridImageSpec__ = Result<std::shared_ptr<HybridImageSpec>>;
  inline Result_std__shared_ptr_HybridImageSpec__ create_Result_std__shared_ptr_HybridImageSpec__(const std::shared_ptr<HybridImageSpec>& value) noexcept {
    return Result<std::shared_ptr<HybridImageSpec>>::withValue(value);
  }
  inline Result_std__shared_ptr_HybridImageSpec__ create_Result_std__shared_ptr_HybridImageSpec__(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<HybridImageSpec>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>>>
  using Result_std__shared_ptr_Promise_std__shared_ptr_HybridImageSpec____ = Result<std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>>>;
  inline Result_std__shared_ptr_Promise_std__shared_ptr_HybridImageSpec____ create_Result_std__shared_ptr_Promise_std__shared_ptr_HybridImageSpec____(const std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>>& value) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__shared_ptr_HybridImageSpec____ create_Result_std__shared_ptr_Promise_std__shared_ptr_HybridImageSpec____(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<std::shared_ptr<HybridImageSpec>>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<void>>>
  using Result_std__shared_ptr_Promise_void___ = Result<std::shared_ptr<Promise<void>>>;
  inline Result_std__shared_ptr_Promise_void___ create_Result_std__shared_ptr_Promise_void___(const std::shared_ptr<Promise<void>>& value) noexcept {
    return Result<std::shared_ptr<Promise<void>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_void___ create_Result_std__shared_ptr_Promise_void___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<void>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::string>>>
  using Result_std__shared_ptr_Promise_std__string___ = Result<std::shared_ptr<Promise<std::string>>>;
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::shared_ptr<Promise<std::string>>& value) noexcept {
    return Result<std::shared_ptr<Promise<std::string>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<std::string>>>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<HybridImageFactorySpec>
  /**
   * Specialized version of `std::shared_ptr<HybridImageFactorySpec>`.
   */
  using std__shared_ptr_HybridImageFactorySpec_ = std::shared_ptr<HybridImageFactorySpec>;
  std::shared_ptr<HybridImageFactorySpec> create_std__shared_ptr_HybridImageFactorySpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridImageFactorySpec_(std__shared_ptr_HybridImageFactorySpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridImageFactorySpec>
  using std__weak_ptr_HybridImageFactorySpec_ = std::weak_ptr<HybridImageFactorySpec>;
  inline std__weak_ptr_HybridImageFactorySpec_ weakify_std__shared_ptr_HybridImageFactorySpec_(const std::shared_ptr<HybridImageFactorySpec>& strong) noexcept { return strong; }
  
  // pragma MARK: std::shared_ptr<HybridNitroImageViewSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroImageViewSpec>`.
   */
  using std__shared_ptr_HybridNitroImageViewSpec_ = std::shared_ptr<HybridNitroImageViewSpec>;
  std::shared_ptr<HybridNitroImageViewSpec> create_std__shared_ptr_HybridNitroImageViewSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridNitroImageViewSpec_(std__shared_ptr_HybridNitroImageViewSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridNitroImageViewSpec>
  using std__weak_ptr_HybridNitroImageViewSpec_ = std::weak_ptr<HybridNitroImageViewSpec>;
  inline std__weak_ptr_HybridNitroImageViewSpec_ weakify_std__shared_ptr_HybridNitroImageViewSpec_(const std::shared_ptr<HybridNitroImageViewSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: std::shared_ptr<HybridImageLoaderSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridImageLoaderSpec>`.
   */
  using std__shared_ptr_HybridImageLoaderSpec_ = std::shared_ptr<HybridImageLoaderSpec>;
  std::shared_ptr<HybridImageLoaderSpec> create_std__shared_ptr_HybridImageLoaderSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridImageLoaderSpec_(std__shared_ptr_HybridImageLoaderSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridImageLoaderSpec>
  using std__weak_ptr_HybridImageLoaderSpec_ = std::weak_ptr<HybridImageLoaderSpec>;
  inline std__weak_ptr_HybridImageLoaderSpec_ weakify_std__shared_ptr_HybridImageLoaderSpec_(const std::shared_ptr<HybridImageLoaderSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() noexcept {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) noexcept {
    return Result<void>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<HybridImageLoaderFactorySpec>
  /**
   * Specialized version of `std::shared_ptr<HybridImageLoaderFactorySpec>`.
   */
  using std__shared_ptr_HybridImageLoaderFactorySpec_ = std::shared_ptr<HybridImageLoaderFactorySpec>;
  std::shared_ptr<HybridImageLoaderFactorySpec> create_std__shared_ptr_HybridImageLoaderFactorySpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridImageLoaderFactorySpec_(std__shared_ptr_HybridImageLoaderFactorySpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridImageLoaderFactorySpec>
  using std__weak_ptr_HybridImageLoaderFactorySpec_ = std::weak_ptr<HybridImageLoaderFactorySpec>;
  inline std__weak_ptr_HybridImageLoaderFactorySpec_ weakify_std__shared_ptr_HybridImageLoaderFactorySpec_(const std::shared_ptr<HybridImageLoaderFactorySpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<HybridImageLoaderSpec>>
  using Result_std__shared_ptr_HybridImageLoaderSpec__ = Result<std::shared_ptr<HybridImageLoaderSpec>>;
  inline Result_std__shared_ptr_HybridImageLoaderSpec__ create_Result_std__shared_ptr_HybridImageLoaderSpec__(const std::shared_ptr<HybridImageLoaderSpec>& value) noexcept {
    return Result<std::shared_ptr<HybridImageLoaderSpec>>::withValue(value);
  }
  inline Result_std__shared_ptr_HybridImageLoaderSpec__ create_Result_std__shared_ptr_HybridImageLoaderSpec__(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<HybridImageLoaderSpec>>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<HybridImageUtilsSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridImageUtilsSpec>`.
   */
  using std__shared_ptr_HybridImageUtilsSpec_ = std::shared_ptr<HybridImageUtilsSpec>;
  std::shared_ptr<HybridImageUtilsSpec> create_std__shared_ptr_HybridImageUtilsSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridImageUtilsSpec_(std__shared_ptr_HybridImageUtilsSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridImageUtilsSpec>
  using std__weak_ptr_HybridImageUtilsSpec_ = std::weak_ptr<HybridImageUtilsSpec>;
  inline std__weak_ptr_HybridImageUtilsSpec_ weakify_std__shared_ptr_HybridImageUtilsSpec_(const std::shared_ptr<HybridImageUtilsSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<std::string>
  using Result_std__string_ = Result<std::string>;
  inline Result_std__string_ create_Result_std__string_(const std::string& value) noexcept {
    return Result<std::string>::withValue(value);
  }
  inline Result_std__string_ create_Result_std__string_(const std::exception_ptr& error) noexcept {
    return Result<std::string>::withError(error);
  }
  
  // pragma MARK: std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>
  /**
   * Wrapper struct for `std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>`.
   * std::variant cannot be used in Swift because of a Swift bug.
   * Not even specializing it works. So we create a wrapper struct.
   */
  struct std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__ {
    std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>> variant;
    std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__(std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>> variant): variant(variant) { }
    operator std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>() const noexcept {
      return variant;
    }
    inline size_t index() const noexcept {
      return variant.index();
    }
    inline std::shared_ptr<HybridImageSpec> get_0() const noexcept {
      return std::get<0>(variant);
    }
    inline std::shared_ptr<HybridImageLoaderSpec> get_1() const noexcept {
      return std::get<1>(variant);
    }
  };
  inline std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__ create_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__(const std::shared_ptr<HybridImageSpec>& value) noexcept {
    return std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__(value);
  }
  inline std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__ create_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__(const std::shared_ptr<HybridImageLoaderSpec>& value) noexcept {
    return std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec__(value);
  }
  
  // pragma MARK: std::optional<std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>>
  /**
   * Specialized version of `std::optional<std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>>`.
   */
  using std__optional_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec___ = std::optional<std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>>;
  inline std::optional<std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>> create_std__optional_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec___(const std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>& value) noexcept {
    return std::optional<std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>>(value);
  }
  inline bool has_value_std__optional_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec___(const std::optional<std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>>& optional) noexcept {
    return optional.has_value();
  }
  inline std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>> get_std__optional_std__variant_std__shared_ptr_HybridImageSpec___std__shared_ptr_HybridImageLoaderSpec___(const std::optional<std::variant<std::shared_ptr<HybridImageSpec>, std::shared_ptr<HybridImageLoaderSpec>>>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<ResizeMode>
  /**
   * Specialized version of `std::optional<ResizeMode>`.
   */
  using std__optional_ResizeMode_ = std::optional<ResizeMode>;
  inline std::optional<ResizeMode> create_std__optional_ResizeMode_(const ResizeMode& value) noexcept {
    return std::optional<ResizeMode>(value);
  }
  inline bool has_value_std__optional_ResizeMode_(const std::optional<ResizeMode>& optional) noexcept {
    return optional.has_value();
  }
  inline ResizeMode get_std__optional_ResizeMode_(const std::optional<ResizeMode>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) noexcept {
    return std::optional<std::string>(value);
  }
  inline bool has_value_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return optional.has_value();
  }
  inline std::string get_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return *optional;
  }

} // namespace margelo::nitro::image::bridge::swift
